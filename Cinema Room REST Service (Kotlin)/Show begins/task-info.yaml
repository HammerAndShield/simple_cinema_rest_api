type: edu
files:
  - name: src/cinema/Application.kt
    visible: true
    text: |
      package cinema
      
      import org.springframework.boot.autoconfigure.SpringBootApplication
      import org.springframework.boot.runApplication
      
      @SpringBootApplication
      class Application
      
      fun main(args: Array<String>) {
          runApplication<Application>(*args)
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |-
      server.port=28852
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
    learner_created: false
  - name: test/CinemaTests.java
    visible: false
    text: |
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.expect.json.builder.JsonArrayBuilder;
      import org.hyperskill.hstest.testing.expect.json.builder.JsonObjectBuilder;
      
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
      
      public class CinemaTests extends SpringTest {
          private static final int totalRows = 9;
          private static final int totalCols = 9;
      
          CheckResult testEndpoint() {
      
              HttpResponse response = get("/seats").send();
      
              if (response.getStatusCode() != 200) {
                  return CheckResult.wrong("GET /seats should respond with " +
                      "status code 200, responded: " + response.getStatusCode() + "\n\n" +
                      "Response body:\n" + response.getContent());
              }
      
              return CheckResult.correct();
          }
      
          CheckResult testEndpointAvailableSeats() {
              HttpResponse response = get("/seats").send();
      
              JsonArrayBuilder arrayBuilder = isArray(totalRows * totalCols);
              for (int i = 1; i <= totalRows; i++) {
                  for (int j = 1; j <= totalCols; j++) {
                      JsonObjectBuilder objectBuilder = isObject()
                              .value("row", i)
                              .value("column", j);
                      arrayBuilder = arrayBuilder.item(objectBuilder);
                  }
              }
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("available_seats", arrayBuilder)
                              .value("total_columns", totalCols)
                              .value("total_rows", totalRows)
              );
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          DynamicTesting[] dynamicTests = new DynamicTesting[]{
              this::testEndpoint,
              this::testEndpointAvailableSeats
          };
      }
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
      
      buildscript {
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$hs.kotlin.version"
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
              classpath "org.jetbrains.kotlin:kotlin-allopen:$hs.kotlin.version"
              classpath "org.jetbrains.kotlin:kotlin-noarg:$hs.kotlin.version"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'kotlin'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      apply plugin: "kotlin-spring"
      apply plugin: "kotlin-jpa"
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
          implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
          implementation 'org.jetbrains.kotlin:kotlin-reflect'
      }
      
      tasks.withType(KotlinCompile) {
          kotlinOptions {
              freeCompilerArgs = ['-Xjsr305=strict']
              jvmTarget = "$hs.kotlin.javaVersion"
          }
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
    learner_created: false
  - name: src/cinema/di/Beans.kt
    visible: true
    learner_created: true
  - name: src/cinema/controllers/SeatsController.kt
    visible: true
    learner_created: true
  - name: src/cinema/models/SeatsModel.kt
    visible: true
    learner_created: true
  - name: src/cinema/models/CinemaRoomModel.kt
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/20457#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 19 Jan 2024 05:07:52 UTC"
record: 1
